package main.scala

import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.streaming.StreamingContext._

object NetworkSQL {
  def main(args: Array[String]) {
//    if (args.length < 3) {
//      System.err.println("Usage: NetworkWordCount <master> <hostname> <port>\n" +
//        "In local mode, <master> should be 'local[n]' with n > 1")
//      System.exit(1)
//    }
    println(args.toList)

    // Create the context with a 1 second batch size



    // Create a NetworkInputDStream on target ip:port and count the
    // words in input stream of \n delimited test (eg. generated by 'nc') 

    val tc = new SqlSparkStreamingContext(args(0), "NetworkSQL", Seconds(1),
      System.getenv("SPARK_HOME"),  Seq("./target/scala-2.9.3/sql-streaming_2.9.3-1.0.jar"))
    tc.test(args)



    //val selected = ts.select(Set("a")).where(new Condition(new Identifier("a"), "=", new Float("1"))).print
    //ts.groupBy(Set("a"), Map("c"->"sum","d"->"max")).print()


//    val newts = ts.toNewTableStream("bbb")
//    newts.select(Set("c","d"))
//    newts.print()

    //val ts1 = ts.select(Set("a","b"))
    //val ts2 = ts.select(Set("c","d"))
    //println(ts1.columnIndexedByName)
    //println(ts2.columnIndexedByName)
    //ts1.join(ts2, Map("a" -> "c"), Set("a","b"), Set("c","d"), "full").print()



    //val words = lines.flatMap(_.split(" "))
    //val wordCounts = words.map(x => (x, 2)).reduceByKey(_ + _)
    //wordCounts.print()
  }
}
